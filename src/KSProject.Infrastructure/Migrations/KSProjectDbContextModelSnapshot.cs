// <auto-generated />
using System;
using KSProject.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KSProject.Infrastructure.Migrations
{
    [DbContext(typeof(KSProjectDbContext))]
    partial class KSProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KSProject.Domain.Aggregates.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("769f69a8-f457-4337-a319-4e05631f641e"),
                            Name = "ViewRoles",
                            Title = "نمایش نقش ها",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("2b9bb0cc-c022-4ee8-8213-3c4235497d10"),
                            Name = "ViewPageRoles",
                            Title = "نمایش نقش ها به صورت صفحه بندی",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("e2201ba3-5ae5-4947-b245-234cb1b8355c"),
                            Name = "ViewRole",
                            Title = "نمایش جزییات نقش",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("5c8de111-0623-4f74-bad7-13e22ab84945"),
                            Name = "AddRole",
                            Title = "افزودن نقش جدید",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("f7208df0-95b9-48ab-b0e9-bb4d1c6671b5"),
                            Name = "UpdateRole",
                            Title = "ویرایش نقش",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("317632a4-2dc2-4465-a817-874c47d3fa16"),
                            Name = "DeleteRole",
                            Title = "حذف نقش",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("fc911fd3-8d58-4061-8307-8b0b1dc26bbb"),
                            Name = "AddTestAggregate",
                            Title = "افزودن موجودیت تستی جدید",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("4f73803c-a22f-46d9-8f0c-fcba00c700e6"),
                            Name = "UpdateTestAggregate",
                            Title = "ویرایش موجودیت تستی",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("8eae9c79-c301-4717-9e4f-e9a921b640c0"),
                            Name = "DeleteTestAggregate",
                            Title = "حذف موجودیت تستس",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("1011ed50-08a7-4983-a3b9-7513e3dfbd3e"),
                            Name = "ViewUsers",
                            Title = "نمایش تمام لیست کاربران",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("018fd5fd-2b38-469e-87b1-5a08ed9a7e74"),
                            Name = "ViewPagedUsers",
                            Title = "نمایش لیست کاربران به صورت صفحه بندی",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("6d7d8938-1e8f-4676-bbe7-265282ad3a5f"),
                            Name = "ViewUser",
                            Title = "نمایش جزییات یک کاربر",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("1920ad7b-9916-42e1-9d83-af5cc213a722"),
                            Name = "UpdateUser",
                            Title = "ویرایش کاربر",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("decd3cdf-9119-4522-9f54-969e2e5a2df6"),
                            Name = "DeleteUser",
                            Title = "حذف کاربر",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("32bd2686-c356-445c-969e-20ba1b5be265"),
                            Name = "AddUser",
                            Title = "افزودن کاربر",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("ccd14a65-90fc-45bf-86bd-36815d2aea4d"),
                            Name = "ViewPermissions",
                            Title = "نمایش دسترسی ها",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("93532db2-1a40-42a3-8689-8851964a9ecf"),
                            Name = "ViewPagePermissions",
                            Title = "نمایش دسترسی ها به صورت صفحه بندی",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("eb737340-dc3e-49a6-8174-9360254372ea"),
                            Name = "ViewPermission",
                            Title = "نمایش جزییات دسترسی",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("4b6b2561-44f6-4b7b-a1a0-85f9df29445d"),
                            Name = "AddPermission",
                            Title = "افزودن دسترسی جدید",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("1a6975cf-84a6-4cf8-9dcc-5344392141ff"),
                            Name = "UpdatePermission",
                            Title = "ویرایش دسترسی",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("08303878-6efb-4878-9f1f-c7c891e2a61c"),
                            Name = "DeletePermission",
                            Title = "حذف دسترسی",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("6ea6ddae-c013-4a24-8834-5aad69c6b564"),
                            Name = "ViewRolePermissions",
                            Title = "نمایش دسترسی های یک نقش",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("7e2c20a0-32e1-4fef-ac87-aeb06a4a8e04"),
                            Name = "UpdateRolePermissions",
                            Title = "ویرایش دسترسی های یک نقش",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("44c01901-bb14-4c96-8db9-7feef8e3c9d9"),
                            Name = "ViewUserPermissions",
                            Title = "نمایش دسترسی های یک کاربر",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("b12e7de8-5e95-4636-a0f3-323921b15640"),
                            Name = "UpdateUserPermissions",
                            Title = "ویرایش دسترسی های یک کاربر",
                            Version = 0
                        });
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("98f4f7df-15bb-4547-8495-f098a753536f"),
                            Description = "Administrator role with all permissions.",
                            Name = "Admin",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("1fd5d547-737a-45d3-b71f-c5e8f692d434"),
                            Description = "Standard user role with limited permissions.",
                            Name = "User",
                            Version = 0
                        });
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Test.TestAggregate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TestAggregates");
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Test.TestEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<Guid>("TestAggregateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TestAggregateId");

                    b.ToTable("TestEntities");
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<bool>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<bool>("SuperAdmin")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("551de0bd-f8bf-4fa4-9523-f19b7c6dd95b"),
                            Active = true,
                            Email = "superadmin@superadmin.com",
                            HashedPassword = "01cVBRfT5lroSYX3twWtmf3Dg3KiLs6gzsr4qvggokk=",
                            PhoneNumber = "09123456780",
                            SuperAdmin = true,
                            UserName = "superadmin",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("5d2b2a64-0fa7-46af-bf1c-aadf1d7fb120"),
                            Active = true,
                            Email = "admin@admin.com",
                            HashedPassword = "01cVBRfT5lroSYX3twWtmf3Dg3KiLs6gzsr4qvggokk=",
                            PhoneNumber = "09123456789",
                            SuperAdmin = false,
                            UserName = "admin",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("c75e1cf0-84c0-4f9e-a608-e9a9b0e7d62f"),
                            Active = true,
                            Email = "user1@user.com",
                            HashedPassword = "vFhI8ifMFh619o3+mMsTEQqchDzmnpU6iBB9hlWD05c=",
                            PhoneNumber = "09123456782",
                            SuperAdmin = false,
                            UserName = "user1",
                            Version = 0
                        },
                        new
                        {
                            Id = new Guid("9650f7f3-333b-4a77-b992-9a55179bfa12"),
                            Active = true,
                            Email = "user2@user.com",
                            HashedPassword = "vFhI8ifMFh619o3+mMsTEQqchDzmnpU6iBB9hlWD05c=",
                            PhoneNumber = "09123456787",
                            SuperAdmin = false,
                            UserName = "user2",
                            Version = 0
                        });
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Users.UserProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("AboutMe")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("BirthDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UsersProfiles", (string)null);
                });

            modelBuilder.Entity("KSProject.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWSEQUENTIALID()");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Error")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OccuredOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OutboxMessages");
                });

            modelBuilder.Entity("RolesPermissions", b =>
                {
                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("RolesPermissions");

                    b.HasData(
                        new
                        {
                            PermissionsId = new Guid("769f69a8-f457-4337-a319-4e05631f641e"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("2b9bb0cc-c022-4ee8-8213-3c4235497d10"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("e2201ba3-5ae5-4947-b245-234cb1b8355c"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("5c8de111-0623-4f74-bad7-13e22ab84945"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("317632a4-2dc2-4465-a817-874c47d3fa16"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("f7208df0-95b9-48ab-b0e9-bb4d1c6671b5"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("ccd14a65-90fc-45bf-86bd-36815d2aea4d"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("93532db2-1a40-42a3-8689-8851964a9ecf"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("eb737340-dc3e-49a6-8174-9360254372ea"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("4b6b2561-44f6-4b7b-a1a0-85f9df29445d"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("08303878-6efb-4878-9f1f-c7c891e2a61c"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("1a6975cf-84a6-4cf8-9dcc-5344392141ff"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("6ea6ddae-c013-4a24-8834-5aad69c6b564"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("7e2c20a0-32e1-4fef-ac87-aeb06a4a8e04"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("44c01901-bb14-4c96-8db9-7feef8e3c9d9"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("b12e7de8-5e95-4636-a0f3-323921b15640"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("1011ed50-08a7-4983-a3b9-7513e3dfbd3e"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("018fd5fd-2b38-469e-87b1-5a08ed9a7e74"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("6d7d8938-1e8f-4676-bbe7-265282ad3a5f"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("32bd2686-c356-445c-969e-20ba1b5be265"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("decd3cdf-9119-4522-9f54-969e2e5a2df6"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        },
                        new
                        {
                            PermissionsId = new Guid("1920ad7b-9916-42e1-9d83-af5cc213a722"),
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f")
                        });
                });

            modelBuilder.Entity("UsersPermissions", b =>
                {
                    b.Property<Guid>("PermissionsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PermissionsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UsersPermissions");

                    b.HasData(
                        new
                        {
                            PermissionsId = new Guid("fc911fd3-8d58-4061-8307-8b0b1dc26bbb"),
                            UsersId = new Guid("c75e1cf0-84c0-4f9e-a608-e9a9b0e7d62f")
                        },
                        new
                        {
                            PermissionsId = new Guid("4f73803c-a22f-46d9-8f0c-fcba00c700e6"),
                            UsersId = new Guid("c75e1cf0-84c0-4f9e-a608-e9a9b0e7d62f")
                        },
                        new
                        {
                            PermissionsId = new Guid("8eae9c79-c301-4717-9e4f-e9a921b640c0"),
                            UsersId = new Guid("c75e1cf0-84c0-4f9e-a608-e9a9b0e7d62f")
                        });
                });

            modelBuilder.Entity("UsersRoles", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UsersRoles");

                    b.HasData(
                        new
                        {
                            RolesId = new Guid("1fd5d547-737a-45d3-b71f-c5e8f692d434"),
                            UsersId = new Guid("551de0bd-f8bf-4fa4-9523-f19b7c6dd95b")
                        },
                        new
                        {
                            RolesId = new Guid("98f4f7df-15bb-4547-8495-f098a753536f"),
                            UsersId = new Guid("5d2b2a64-0fa7-46af-bf1c-aadf1d7fb120")
                        },
                        new
                        {
                            RolesId = new Guid("1fd5d547-737a-45d3-b71f-c5e8f692d434"),
                            UsersId = new Guid("c75e1cf0-84c0-4f9e-a608-e9a9b0e7d62f")
                        },
                        new
                        {
                            RolesId = new Guid("1fd5d547-737a-45d3-b71f-c5e8f692d434"),
                            UsersId = new Guid("9650f7f3-333b-4a77-b992-9a55179bfa12")
                        });
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Test.TestEntity", b =>
                {
                    b.HasOne("KSProject.Domain.Aggregates.Test.TestAggregate", "TestAggregate")
                        .WithMany("Entities")
                        .HasForeignKey("TestAggregateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("TestAggregate");
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Users.User", b =>
                {
                    b.OwnsMany("KSProject.Domain.Aggregates.Users.ValueObjects.UserLoginDate", "UserLoginDates", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier")
                                .HasDefaultValueSql("NEWSEQUENTIALID()");

                            b1.Property<string>("IpAddress")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<DateTimeOffset>("LoginDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserLoginDates", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("KSProject.Domain.Aggregates.Users.ValueObjects.UserSecurityStamp", "UserSecurityStamps", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier")
                                .HasDefaultValueSql("NEWSEQUENTIALID()");

                            b1.Property<DateTimeOffset>("CreatedAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("ExpirationDate")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("SecurityStamp")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserSecurityStamps", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsMany("KSProject.Domain.Aggregates.Users.ValueObjects.UserToken", "UserTokens", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier")
                                .HasDefaultValueSql("NEWSEQUENTIALID()");

                            b1.Property<DateTimeOffset>("ExpirationDateTime")
                                .HasColumnType("datetimeoffset");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<int>("Type")
                                .HasColumnType("int");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("Id");

                            b1.HasIndex("UserId");

                            b1.ToTable("UserTokens", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("UserLoginDates");

                    b.Navigation("UserSecurityStamps");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Users.UserProfile", b =>
                {
                    b.HasOne("KSProject.Domain.Aggregates.Users.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("KSProject.Domain.Aggregates.Users.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("RolesPermissions", b =>
                {
                    b.HasOne("KSProject.Domain.Aggregates.Permissions.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KSProject.Domain.Aggregates.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersPermissions", b =>
                {
                    b.HasOne("KSProject.Domain.Aggregates.Permissions.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KSProject.Domain.Aggregates.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersRoles", b =>
                {
                    b.HasOne("KSProject.Domain.Aggregates.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("KSProject.Domain.Aggregates.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Test.TestAggregate", b =>
                {
                    b.Navigation("Entities");
                });

            modelBuilder.Entity("KSProject.Domain.Aggregates.Users.User", b =>
                {
                    b.Navigation("Profile");
                });
#pragma warning restore 612, 618
        }
    }
}
